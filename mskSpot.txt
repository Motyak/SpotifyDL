
musique (infos:album,titre,artiste/groupe,annee,duree,version(radioMix,..))
|
 ->source téléchargement(site,tracker), protocole(ddl,.torrent,magnet)


1)Récupérer à partir de Spotify(outil le plus utilisé pour streaming musique on suppose) 
	les infos concernant la/les musiques d'une playlist.

2)Enregistrer ces informations et faire une sorte de file d'attente (on télécharge une par une)

3)Chercher pour la musique des sources de téléchargement

4)Télécharger une première version de la musique (en conservant les sources + datage 
	de la recherche de sources)

5)Vérifier qualité fichier (infos MediaInfo d'abord puis analyse spectre fréquence (chercher fmax)

6)Répéter les étapes 4 et 5 pour chaque source

//Correspond à la musique que l'on cherche à télécharger, toutes ces infos sont fournis par la plateforme
	de streaming comme Spotify
Musique{
	album,titre,version : chaines
	artistes : ensemble de chaines
	sources : ensemble de Sources
	anneeAlbum : entier positif court
	duree : duree(format->hh:mm:ss)
	//infos principales : *artiste/groupe* - *titre* *version* *année* *album* *duree**
	fichiers : ensemble de Fichiers
}

Source{
	source : chaine
	protocole : Protocole	//enumeration(ddl,torrent,magnet,...)
}

File : ensemble de musiques

//Correspond au fichier que l'on DEVRAIT téléchargé si on se fit au fichier NFO du torrent/page
	renseignements du fichier.
//Correspond également au fichier final, téléchargé. (Idéalement le fichier final corresponde
	aux infos trouvés sur le NFO/page renseignements)
Fichier{
	musique : Musique
	//infos : FichierNfo
	format : enumération(FLAC,ALAC,MP3,WAV,...)
	duree : duree(format->hh:mm:ss)
	//bitrateMode : enumération(Variable,Constant,Average,...)
	bitrate (unité kbps) : entier positif court
	nbDeCanaux : enumération(Stereo,5.1,Mono,...)
	freqEchant : entier positif 
	profondeurBit : entier positif court
	taille (unité : octets) : entier positif
	Encodeur : énumération(libFLAC)
	versEncodeur : Version(format->a.*.*)	//-1 si champs vide, premier champs obligatoire (par déf. 0)
	dateEncodage : date(format->AAAA-MM-DD)
}

l'objet musique pendant la phase de pré-recherche n'est pas le même objet que celui se trouvant dans le fichier
	téléchargé car il se peut qu'on ai trouvé le morceau dans un album genre compil', et du coup
	pas l'album originel!
	
Telechargement{
	fichier : Fichier
}	

On cherche sur un ensemble de sites des fichiers pouvant contenir la musique (souvent des albums
	ou discographie), on privilégie les torrents avec beaucoup de seeder,un bon rapport seed/leech
	+ on vérifie les infos du nfo

On peut réutiliser la cover d'album de spotify pour l'ajouter au fichier final!! (énorme)
__________________________________________


//Toutes requetes à l'interface de prog Spotify nécessite une authentification (OAuth token)
//Je pense que le mieux c'est de faire une demande à l'utilisateur même plutot que de faire toutes les 
	requetes depuis un meme compte
Premier objectif : 
-Convertir une playlist Spotify en un ensemble de Musiques (sans fichiers/sources pour l'instant) au format JSON
	et l'enregistrer dans un fichier

Commande env linux pour afficher le contenu du json en utilisant mon token OAuth (token temporaire)
curl -X "GET" "https://api.spotify.com/v1/playlists/4YEwaHa5uYARV44afNEbNl" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer BQCi4jgMXaJYNLVKHUy6og41M6M-T8ZaB_PlyJ9C2nCddyJXiPSJsDQ_bRRyvwjE3ci8XGcbghHTs3PoXmrudPB4iPmoiHN1kszy2RIvIvirX8k9dGYDHNE6u2d5j2gjxLvl9BxtkstZLg"
//trouver l'équivalent en code


json->tracks->items->*idObjet(0-n;i++)*->track->album->name
	->track->name
	->track->artists->*idArtiste(0-n;i++)*->name
	//sur l'api, la version fait parti intégrante du titre du morceau, donc on cancel l'attr version
	->track->album->release_date
		(Récupérer l'année du string suivant)
	->track->duration
		(Convertir en Duree)
	(->track->album->images->0->url	//image en dimension 600x600)
	(Convertir en Date,format->AAAA-MM-DD)->*idDernierObjet*->added_at	//pour nom fichier JSON~

//curlpp->lib pour faire la requete http GET du json, jsoncpp->lib pour récupérer les champs interessant
//Utiliser json for modern C++ pour serialiser/deserialiser un objet
//j'ai installé la librairie curl,curlcpp et jsoncpp sur WSL
g++ -o main main.cpp -I . -lcurlpp -lcurl -ljsoncpp

Pour générer le token OAuth -> https://developer.spotify.com/console/get-playlist/?playlist_id=3cEYpjA9oz9GiPac4AsH4n&market=ES&fields=items(added_by.id%2Ctrack(name%2Chref%2Calbum(name%2Chref)))
Le programme devrait d'abord vérifier si le fichier json a vraiment besoin d'être re-téléchargé
	(si la date d'ajout du dernier morceau de la playlist du fichier json correspond à celui de la playlist
	online=>pas besoin de re-télécharger la même chose!)

//on convertis un objet en objet JSON, puis on enregistre l'objet JSON dans un fichier JSON
//on recupere le contenu d'un fichier JSON pour en faire un objet JSON, puis on convertis cet objet JSON
	en objet.

Récupérer token OAuth : (le champs redirect_uri est sensé être le lien vers lequel est redirigé l'utilisateur
	après l'autorisation, l'url final comporte entre autre le champs token à récupérer
https://accounts.spotify.com/authorize?client_id=8e02a3ee1a6e4307b296aa3e846c0e88&redirect_uri=http:%2F%2Flocalhost%3A8888%2Fcallback&response_type=token

Prochain objectif : 
La classe FichierMusique hérite de Fichier.
FichierMusique contient les infos telles que le bitrate, nb de canaux, profondeur en bits, freq échantillonage,
	spectre fréquence, duree, format, mode bitrate
//utiliser la librairie MediaInfoLib->Github de MediaArea
_________________________________________________!!!
Faire les tests unitaires de chaque classe
//modifier l'implémentation de la méthode Fichier::fstreamToFichier (virer les reverse) : 

// /chemin/fichier.mp3		//taille chaine : 19 (0..18)
//	  ^	     ^
//	 fin	   debut

unsigned int = path.size()-1;
while(path[i-1]!='\0'&&path[i]!='/')
	i--;

//i=8

taille nom fichier = taille path - i
	=19-8=11
	
		
